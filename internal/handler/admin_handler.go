package handler

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"team_bot/internal/model"
	"team_bot/internal/repository/sqlrepo"
	"team_bot/internal/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type AuthHandler struct {
	bot           *tgbotapi.BotAPI
	repo          *sqlrepo.AuthRepository
	adminUsers    []string
	inviteService *service.InviteService
}

func NewAuthHandler(bot *tgbotapi.BotAPI, repo *sqlrepo.AuthRepository, adminUsers []string) *AuthHandler {
	return &AuthHandler{
		bot:           bot,
		repo:          repo,
		adminUsers:    adminUsers,
		inviteService: service.NewInviteService(repo),
	}
}

func (h *AuthHandler) HandleUpdate(ctx context.Context, update *tgbotapi.Update) error {
	if update.Message == nil {
		return nil
	}

	if strings.HasPrefix(update.Message.Text, "/start ") {
		return h.HandleStartWithToken(ctx, update)
	}

	switch update.Message.Text {
	case "/start":
		return h.HandleStart(ctx, update)
	case "/help":
		return h.HandleHelp(ctx, update)
	case "/join":
		return h.HandleJoinTeam(ctx, update)
	case "/admin":

		if !h.CheckUserAccess(ctx, update.Message.From.ID, update.Message.Chat.ID) {
			return nil
		}
		return h.HandleAdmin(ctx, update)
	case "/create_invite":

		if !h.CheckUserAccess(ctx, update.Message.From.ID, update.Message.Chat.ID) {
			return nil
		}
		return h.HandleCreateInvite(ctx, update)
	case "/invite_info":

		if !h.CheckUserAccess(ctx, update.Message.From.ID, update.Message.Chat.ID) {
			return nil
		}
		return h.HandleInviteInfo(ctx, update)
	default:

		if !h.CheckUserAccess(ctx, update.Message.From.ID, update.Message.Chat.ID) {
			return nil
		}
		return h.handleUnknownCommand(ctx, update)
	}
}

func (h *AuthHandler) handleUnknownCommand(ctx context.Context, update *tgbotapi.Update) error {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending unknown command message: %v", err)
	}
	return nil
}

func (h *AuthHandler) CheckAdminAccess(ctx context.Context, userID int64, chatID int64) (bool, error) {
	isAdmin, err := h.repo.IsAdmin(ctx, userID)
	if err != nil {
		return false, fmt.Errorf("error checking admin status: %v", err)
	}

	if !isAdmin {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("Error sending access denied message: %v", err)
		}
		return false, nil
	}

	return true, nil
}

func (h *AuthHandler) HandleStart(ctx context.Context, update *tgbotapi.Update) error {

	isAdmin := false
	username := update.Message.From.UserName
	for _, adminUsername := range h.adminUsers {
		if username == adminUsername {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return h.HandleJoinTeam(ctx, update)
	}

	user := &model.User{
		ID:          update.Message.From.ID,
		Username:    username,
		ChatID:      update.Message.Chat.ID,
		CreatedTime: time.Now(),
		IsAdmin:     isAdmin,
	}

	if err := h.repo.SaveUser(ctx, user); err != nil {
		log.Printf("Error saving user: %v", err)
		return fmt.Errorf("error saving user: %v", err)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π.\n‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", username))
	msg.ReplyToMessageID = update.Message.MessageID

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending message: %v", err)
	}

	return nil
}

func (h *AuthHandler) HandleAdmin(ctx context.Context, update *tgbotapi.Update) error {
	isAdmin, err := h.repo.IsAdmin(ctx, update.Message.From.ID)
	if err != nil {
		return fmt.Errorf("error checking admin status: %v", err)
	}

	var responseText string
	if isAdmin {
		responseText = "‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
	} else {
		responseText = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, responseText)
	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending admin status message: %v", err)
	}

	return nil
}


func (h *AuthHandler) HandleStartWithToken(ctx context.Context, update *tgbotapi.Update) error {

	parts := strings.Split(update.Message.Text, " ")
	if len(parts) != 2 {
		return h.HandleStart(ctx, update)
	}

	token := parts[1]


	inviteToken, err := h.inviteService.ValidateAndUseToken(ctx, token)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ: %s", err.Error()))
		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("Error sending token error message: %v", err)
		}
		return h.HandleStart(ctx, update)
	}


	username := update.Message.From.UserName
	user := &model.User{
		ID:          update.Message.From.ID,
		Username:    username,
		ChatID:      update.Message.Chat.ID,
		CreatedTime: time.Now(),
		IsAdmin:     false, 
	}

	if err := h.repo.SaveUser(ctx, user); err != nil {
		log.Printf("Error saving user: %v", err)
		return fmt.Errorf("error saving user: %v", err)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, %s!\n\n"+
			"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ.\n"+
			"üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–∞: %d/%d",
			username, inviteToken.UsageCount, inviteToken.MaxUsage))
	msg.ReplyToMessageID = update.Message.MessageID

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending welcome message: %v", err)
	}

	return nil
}


func (h *AuthHandler) HandleCreateInvite(ctx context.Context, update *tgbotapi.Update) error {

	hasAccess, err := h.CheckAdminAccess(ctx, update.Message.From.ID, update.Message.Chat.ID)
	if err != nil || !hasAccess {
		return err
	}


	token, err := h.inviteService.CreateInviteLink(ctx, update.Message.From.ID, 24, 50)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: %v", err))
		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("Error sending error message: %v", err)
		}
		return fmt.Errorf("error creating invite link: %v", err)
	}


	botInfo, err := h.bot.GetMe()
	if err != nil {
		log.Printf("Error getting bot info: %v", err)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"+
				"<b>–¢–æ–∫–µ–Ω:</b> <code>%s</code>\n"+
				"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> –¥–æ %s\n"+
				"<b>–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> %d\n\n"+
				"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ.",
				token.Token,
				token.ExpiresAt.Format("02.01.2006 15:04"),
				token.MaxUsage))
		msg.ParseMode = "HTML"
		if _, err := h.bot.Send(msg); err != nil {
			return fmt.Errorf("error sending invite link: %v", err)
		}
		return nil
	}


	inviteLink := h.inviteService.FormatInviteLink(botInfo.UserName, token.Token)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"+
			"<b>–°—Å—ã–ª–∫–∞:</b> %s\n"+
			"<b>–¢–æ–∫–µ–Ω:</b> <code>%s</code>\n"+
			"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> –¥–æ %s\n"+
			"<b>–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> %d\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ.",
			inviteLink,
			token.Token,
			token.ExpiresAt.Format("02.01.2006 15:04"),
			token.MaxUsage))
	msg.ParseMode = "HTML"

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending invite link: %v", err)
	}

	return nil
}


func (h *AuthHandler) HandleInviteInfo(ctx context.Context, update *tgbotapi.Update) error {

	hasAccess, err := h.CheckAdminAccess(ctx, update.Message.From.ID, update.Message.Chat.ID)
	if err != nil || !hasAccess {
		return err
	}


	token, err := h.inviteService.GetInviteLink(ctx)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Å—ã–ª–∫–µ: %v", err))
		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("Error sending error message: %v", err)
		}
		return fmt.Errorf("error getting invite info: %v", err)
	}

	if token == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_invite –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏.")
		if _, err := h.bot.Send(msg); err != nil {
			return fmt.Errorf("error sending no invite message: %v", err)
		}
		return nil
	}


	timeLeft := time.Until(token.ExpiresAt)
	var statusText string
	if timeLeft <= 0 {
		statusText = "‚ùå –ò—Å—Ç–µ–∫"
	} else {
		hours := int(timeLeft.Hours())
		minutes := int(timeLeft.Minutes()) % 60
		statusText = fmt.Sprintf("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (%d—á %d–º)", hours, minutes)
	}

	botInfo, err := h.bot.GetMe()
	var inviteLink string
	if err != nil {
		inviteLink = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"
	} else {
		inviteLink = h.inviteService.FormatInviteLink(botInfo.UserName, token.Token)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</b>\n\n"+
			"<b>–°—Å—ã–ª–∫–∞:</b> %s\n"+
			"<b>–¢–æ–∫–µ–Ω:</b> <code>%s</code>\n"+
			"<b>–°—Ç–∞—Ç—É—Å:</b> %s\n"+
			"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> %d/%d\n"+
			"<b>–°–æ–∑–¥–∞–Ω–∞:</b> %s\n"+
			"<b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> %s",
			inviteLink,
			token.Token,
			statusText,
			token.UsageCount,
			token.MaxUsage,
			token.CreatedAt.Format("02.01.2006 15:04"),
			token.ExpiresAt.Format("02.01.2006 15:04")))
	msg.ParseMode = "HTML"

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending invite info: %v", err)
	}

	return nil
}


func (h *AuthHandler) HandleJoinTeam(ctx context.Context, update *tgbotapi.Update) error {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üîó <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ</b>\n\n"+
			"–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ –≤–∞–º –Ω—É–∂–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"+
			"<b>–ö–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:</b>\n"+
			"1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"+
			"2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å —Ç–æ–∫–µ–Ω–æ–º\n\n"+
			"<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/start abc123def456</code>")
	msg.ParseMode = "HTML"

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending join info: %v", err)
	}

	return nil
}


func (h *AuthHandler) CheckUserAccess(ctx context.Context, userID int64, chatID int64) bool {

	exists, err := h.repo.UserExists(ctx, userID)
	if err != nil {
		log.Printf("Error checking user existence: %v", err)

		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ.")
		if _, sendErr := h.bot.Send(msg); sendErr != nil {
			log.Printf("Error sending access error message: %v", sendErr)
		}
		return false
	}

	if !exists {

		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ.")
		if _, err := h.bot.Send(msg); err != nil {
			log.Printf("Error sending access denied message: %v", err)
		}
		return false
	}

	return true
}

func (h *AuthHandler) Start(ctx context.Context) {
	log.Println("Starting bot...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			log.Println("Stopping bot...")
			h.bot.StopReceivingUpdates()
			return
		case update := <-updates:
			if err := h.HandleUpdate(ctx, &update); err != nil {
				log.Printf("Error handling update: %v", err)
			}
		}
	}
}


func (h *AuthHandler) HandleHelp(ctx context.Context, update *tgbotapi.Update) error {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	

	exists, err := h.repo.UserExists(ctx, userID)
	if err != nil {
		log.Printf("Error checking user existence: %v", err)

		msg := tgbotapi.NewMessage(chatID, h.getGuestHelpText())
		msg.ParseMode = "HTML"
		if _, err := h.bot.Send(msg); err != nil {
			return fmt.Errorf("error sending help message: %v", err)
		}
		return nil
	}

	if !exists {

		msg := tgbotapi.NewMessage(chatID, h.getGuestHelpText())
		msg.ParseMode = "HTML"
		if _, err := h.bot.Send(msg); err != nil {
			return fmt.Errorf("error sending guest help message: %v", err)
		}
		return nil
	}


	isAdmin, err := h.repo.IsAdmin(ctx, userID)
	if err != nil {
		log.Printf("Error checking admin status: %v", err)

		msg := tgbotapi.NewMessage(chatID, h.getUserHelpText())
		msg.ParseMode = "HTML"
		if _, err := h.bot.Send(msg); err != nil {
			return fmt.Errorf("error sending user help message: %v", err)
		}
		return nil
	}

	var helpText string
	if isAdmin {
		helpText = h.getAdminHelpText()
	} else {
		helpText = h.getUserHelpText()
	}

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "HTML"
	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("error sending help message: %v", err)
	}

	return nil
}


func (h *AuthHandler) getGuestHelpText() string {
	return "ü§ñ <b>–ü–æ–º–æ—â—å - –ì–æ—Å—Ç—å</b>\n\n" +
		"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" +
		"/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
		"/join - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ\n\n" +
		"<b>–ö–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ:</b>\n" +
		"1. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" +
		"2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —Å —Ç–æ–∫–µ–Ω–æ–º\n\n" +
		"<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/start abc123def456</code>"
}


func (h *AuthHandler) getUserHelpText() string {
	return "ü§ñ <b>–ü–æ–º–æ—â—å - –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã</b>\n\n" +
		"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" +
		"/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
		"/admin - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
		"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã"
}


func (h *AuthHandler) getAdminHelpText() string {
	return "ü§ñ <b>–ü–æ–º–æ—â—å - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n" +
		"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" +
		"/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
		"/admin - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
		"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏:</b>\n" +
		"/create_invite - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n" +
		"/invite_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–µ\n\n" +
		"<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
		"/join - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ\n\n" +
		"<b>–°—Ç–∞—Ç—É—Å:</b> üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n" +
		"<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n" +
		"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (24 —á–∞—Å–∞, –¥–æ 100 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)\n" +
		"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫\n" +
		"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É"
}
